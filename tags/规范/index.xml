<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>规范 on liming.pub</title>
    <link>https://liming.pub/tags/%E8%A7%84%E8%8C%83/</link>
    <description>Recent content in 规范 on liming.pub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 02 Jun 2019 11:35:02 +0800</lastBuildDate>
    
	<atom:link href="https://liming.pub/tags/%E8%A7%84%E8%8C%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git分支策略及开发流程规范</title>
      <link>https://liming.pub/post/git-branch-develop-specification/</link>
      <pubDate>Sun, 02 Jun 2019 11:35:02 +0800</pubDate>
      
      <guid>https://liming.pub/post/git-branch-develop-specification/</guid>
      <description></description>
    </item>
    
    <item>
      <title>RESTful资源定义规范及实践</title>
      <link>https://liming.pub/post/restful-resource-specification/</link>
      <pubDate>Sun, 12 May 2019 16:07:30 +0800</pubDate>
      
      <guid>https://liming.pub/post/restful-resource-specification/</guid>
      <description>&lt;p&gt;面试了N多的程序员，知道PUT的都寥寥无几，更别说HTTP状态码了，也对接过国内各大厂的API，竟没一家是遵守RESTful的！所以想要真正推行RESTful规范，那是真的困难重重，不光要培训和训练那些写API的程序员，还要跟合作方各种说服和引导。所以一直酝酿着想写个RESTful这个主题，但是由于自己在实践过程中，总是不断冒出新的问题，新的认识，所以一直不忍下手。刚过五一的这个大周末，闲在家没出门，写不了RESTful这个主题，整理一下RESTful资源这块的实践经验我觉得还是够格的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据库设计规范</title>
      <link>https://liming.pub/post/database-design-specification/</link>
      <pubDate>Sun, 31 Mar 2019 10:27:07 +0800</pubDate>
      
      <guid>https://liming.pub/post/database-design-specification/</guid>
      <description>&lt;p&gt;当我们使用数据库模型驱动开发时，数据库规范的重要性不言而喻，本文是在日常项目中总结的数据库设计规范，当然这些仅适用于新研项目，对于有历史负债的公司和系统慎用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT最佳实践</title>
      <link>https://liming.pub/post/jwt/</link>
      <pubDate>Sat, 19 Jan 2019 22:33:53 +0800</pubDate>
      
      <guid>https://liming.pub/post/jwt/</guid>
      <description>&lt;p&gt;在单服务型应用时代，扩容时必须配备F5这样的硬件设备来解决session会话保持的问题；在微服务开始流行时，spring也给出了Spring Session这样的分布式共享会话方案；在Restful和前后端分离架构下，JWT才是正道。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>API错误码规范</title>
      <link>https://liming.pub/post/api-problem-json/</link>
      <pubDate>Mon, 31 Dec 2018 11:05:49 +0800</pubDate>
      
      <guid>https://liming.pub/post/api-problem-json/</guid>
      <description>&lt;p&gt;做了这么多年项目，倾听了太多开发人员对API接口返回错误码的吐槽，收到了太多用户对系统中云里雾里错误信息的埋怨。我在这几年实践中尝试过一些的解决方案，今天就做一下总结。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>