<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on liming.pub</title>
    <link>https://liming.pub/draft/</link>
    <description>Recent content in Drafts on liming.pub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://liming.pub/draft/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/asciidoctor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/asciidoctor/</guid>
      <description>== 多语言支持 目前官方暂不支持多语言，参考link:https://asciidoctor.org/docs/user-manual/#language-support[文档]和link:https://github.com/asciidoctor/asciidoctor/blob/master/lib/asciidoctor/document.rb[源码]的第361行。
官方也提供了一个解决方案，就是在具体的adoc文件中通过include来修改中文翻译，如： include::https://raw.githubusercontent.com/asciidoctor/asciidoctor/master/data/locale/attributes-zh_CN.adoc[]。这个方法试了下可以解决问题，但是侵入太大，不是一种优雅的解决方案。
好在ruby是解释型脚本语言，可以自己动手修改本地运行的源码，修改方法如下：
. Mac下 brew install asciidoctor 安装后的位置为：/usr/local/Cellar/asciidoctor/2.0.6/libexec/gems/asciidoctor-2.0.6/lib/asciidoctor/document.rb . CentOs下 yum install asciidoctor 安装后的位置为：/usr/share/gems/gems/asciidoctor-1.5.6.1/lib/asciidoctor/document.rb + NOTE: 如果不在此目录，可以使用 gem environment 查看 GEM PATHS 具体路径。 + . 找到如下定义并进行替换修改
[source,ruby] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  # language strings # TODO load these based on language settings attrs[&amp;#39;caution-caption&amp;#39;] = &amp;#39;注意&amp;#39; attrs[&amp;#39;important-caption&amp;#39;] = &amp;#39;重要&amp;#39; attrs[&amp;#39;note-caption&amp;#39;] = &amp;#39;备注&amp;#39; attrs[&amp;#39;tip-caption&amp;#39;] = &amp;#39;提示&amp;#39; attrs[&amp;#39;warning-caption&amp;#39;] = &amp;#39;警告&amp;#39; attrs[&amp;#39;example-caption&amp;#39;] = &amp;#39;示例&amp;#39; attrs[&amp;#39;figure-caption&amp;#39;] = &amp;#39;数字&amp;#39; #attrs[&amp;#39;listing-caption&amp;#39;] = &amp;#39;清单&amp;#39; attrs[&amp;#39;table-caption&amp;#39;] = &amp;#39;表格&amp;#39; attrs[&amp;#39;toc-title&amp;#39;] = &amp;#39;目录&amp;#39; #attrs[&amp;#39;preface-title&amp;#39;] = &amp;#39;前言&amp;#39; attrs[&amp;#39;section-refsig&amp;#39;] = &amp;#39;章节&amp;#39; attrs[&amp;#39;part-refsig&amp;#39;] = &amp;#39;部&amp;#39; attrs[&amp;#39;chapter-refsig&amp;#39;] = &amp;#39;篇&amp;#39; attrs[&amp;#39;appendix-caption&amp;#39;] = attrs[&amp;#39;appendix-refsig&amp;#39;] = &amp;#39;附录&amp;#39; attrs[&amp;#39;untitled-label&amp;#39;] = &amp;#39;未命名&amp;#39; attrs[&amp;#39;version-label&amp;#39;] = &amp;#39;版本&amp;#39; attrs[&amp;#39;last-update-label&amp;#39;] = &amp;#39;更新于&amp;#39;   == 模板 看了下官方的 https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/gitlab-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/gitlab-ci/</guid>
      <description>= Gitlab-CI配置
== 服务端 === 开启CI === 配置CI == 客户端 === 安装gitlab-runner
[source,bash] curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash
yum install gitlab-ci-multi-runner === 配置gitlab-runner
vi /etc/gitlab-runner/config.toml
[source] concurrent = 10 check_interval = 0
[[runners]] name = &amp;ldquo;name&amp;rdquo; url = &amp;ldquo;http://192.168.1.1/ci&amp;quot; token = &amp;ldquo;&amp;rdquo; executor = &amp;ldquo;shell&amp;rdquo;
[runners.cache] === 常见问题： . 访问偶尔出现Forbidden 原因：Gitlab使用rack_attack做了并发访问的限制。 解决方案：将Gitlab的IP设置为白名单即可。编辑配置文件：
vi /etc/gitlab/gitlab.rb 输入“/”,查找gitlab_rails[&amp;lsquo;rack_attack_git_basic_auth&amp;rsquo;]关键词，取消注释。 修改ip_whitelist白名单属性，加入Gitlab部署的IP地址。如下所示：
1 2 3 4 5 6 7  gitlab_rails[&amp;#39;rack_attack_git_basic_auth&amp;#39;] = { &amp;#39;enabled&amp;#39; =&amp;gt; true, &amp;#39;ip_whitelist&amp;#39; =&amp;gt; [&amp;#34;127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/homebrew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/homebrew/</guid>
      <description>== 官网 https://brew.sh/index_zh-cn
官方的仓库：https://github.com/Homebrew/homebrew-core
== 定制自己的软件 https://mogeko.me/2019/046/ 参考： https://docs.brew.sh/Taps</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/openresty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/openresty/</guid>
      <description>== 安装 安装官网步骤安装即可： http://openresty.org/cn/linux-packages.html
== JWT 由于 https://github.com/auth0/nginx-jwt 已经没人维护，所以这里采用 https://github.com/SkyLothar/lua-resty-jwt。
=== lua-resty-jwt安装
[source,bash] mkdir -p /usr/local/openresty/nginx/jwt-lua/ curl -L https://github.com/SkyLothar/lua-resty-jwt/releases/download/v0.1.11/lua-resty-jwt-0.1.11.tar.gz -o /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11.tar.gz tar -xvf /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11.tar.gz -C /usr/local/openresty/nginx/jwt-lua/ curl -L https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/lib/resty/hmac.lua -o /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11/lib/resty/hmac.lua
curl -L https://raw.githubusercontent.com/SkyLothar/lua-resty-jwt/master/examples/guard.lua -o /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11/lib/resty/guard.lua === 配置保护资源
.nginx.conf
[source] error_log logs/error.log debug; #  http { lua_code_cache off; #  lua_package_path &amp;ldquo;/usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11/lib/?.lua;;&amp;rdquo;; server { listen 80; charset utf-8; location = /login { set $jwt_secret &amp;ldquo;lua-resty-jwt&amp;rdquo;; set $jwt_duration 900; content_by_lua &amp;lsquo; &amp;ndash;获取get或post参数 local request_method = ngx.</description>
    </item>
    
  </channel>
</rss>