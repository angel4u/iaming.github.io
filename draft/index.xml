<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on liming.pub</title>
    <link>https://liming.pub/draft/</link>
    <description>Recent content in Drafts on liming.pub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="https://liming.pub/draft/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/gitlab-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/gitlab-ci/</guid>
      <description>= Gitlab-CI配置
== 服务端 === 开启CI === 配置CI == 客户端 === 安装gitlab-runner
[source,bash] curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash
yum install gitlab-ci-multi-runner === 配置gitlab-runner
vi /etc/gitlab-runner/config.toml
[source] concurrent = 10 check_interval = 0
[[runners]] name = &amp;ldquo;name&amp;rdquo; url = &amp;ldquo;http://192.168.1.1/ci&amp;quot; token = &amp;ldquo;&amp;rdquo; executor = &amp;ldquo;shell&amp;rdquo;
[runners.cache] === 常见问题： . 访问偶尔出现Forbidden 原因：Gitlab使用rack_attack做了并发访问的限制。 解决方案：将Gitlab的IP设置为白名单即可。编辑配置文件：
vi /etc/gitlab/gitlab.rb 输入“/”,查找gitlab_rails[&amp;lsquo;rack_attack_git_basic_auth&amp;rsquo;]关键词，取消注释。 修改ip_whitelist白名单属性，加入Gitlab部署的IP地址。如下所示：
1 2 3 4 5 6 7  gitlab_rails[&amp;#39;rack_attack_git_basic_auth&amp;#39;] = { &amp;#39;enabled&amp;#39; =&amp;gt; true, &amp;#39;ip_whitelist&amp;#39; =&amp;gt; [&amp;#34;127.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/homebrew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/homebrew/</guid>
      <description>== 官网 https://brew.sh/index_zh-cn
官方的仓库：https://github.com/Homebrew/homebrew-core
== 定制自己的软件 https://mogeko.me/2019/046/ 参考： https://docs.brew.sh/Taps</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/openresty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/openresty/</guid>
      <description>说起后端Web服务，技术选型主要有两个方向：一是企业大型应用，这块是java称霸，选择没有悬念。还有一个是轻快小省型应用，这块选择就比较多了，比如：以开发效率著称的php，python，ruby on rails；以全栈著称的nodejs；以运行效率和并发著称的go，。
今天主要介绍的主角是lua和nginx的组合：openresty，他运行效率不输go，开发效率不输python，是追求轻快小省极致的最佳选择。
== 安装 安装官网步骤安装即可： http://openresty.org/cn/linux-packages.html
== JWT 由于 https://github.com/auth0/nginx-jwt 已经没人维护，所以这里采用 https://github.com/SkyLothar/lua-resty-jwt。
=== lua-resty-jwt安装
[source,bash] mkdir -p /usr/local/openresty/nginx/jwt-lua/ curl -L https://github.com/SkyLothar/lua-resty-jwt/releases/download/v0.1.11/lua-resty-jwt-0.1.11.tar.gz -o /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11.tar.gz tar -xvf /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11.tar.gz -C /usr/local/openresty/nginx/jwt-lua/ curl -L https://raw.githubusercontent.com/jkeys089/lua-resty-hmac/master/lib/resty/hmac.lua -o /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11/lib/resty/hmac.lua
curl -L https://raw.githubusercontent.com/SkyLothar/lua-resty-jwt/master/examples/guard.lua -o /usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11/lib/resty/guard.lua === 配置保护资源
.nginx.conf
[source] error_log logs/error.log debug; #  http { lua_code_cache off; #  lua_package_path &amp;ldquo;/usr/local/openresty/nginx/jwt-lua/lua-resty-jwt-0.1.11/lib/?.lua;;&amp;rdquo;; server { listen 80; charset utf-8; location = /login { set $jwt_secret &amp;ldquo;lua-resty-jwt&amp;rdquo;; set $jwt_duration 900; content_by_lua &amp;lsquo; &amp;ndash;获取get或post参数 local request_method = ngx.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://liming.pub/draft/ztemplate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://liming.pub/draft/ztemplate/</guid>
      <description> = 语法规范
== 语法分析
.TT2语法概要 [cols=&amp;ldquo;1,4&amp;rdquo;no] |=== |指令|语法
|赋值 |[% variable = value %]
|取值 |[% variable %]
|调用方法 |[% CALL variable %]
|判断分支 |[% IF condition %] content [% ELSIF condition %] content [% ELSE %] content [% END %]
|
|=== [NOTE] 更多语法见link:http://www.template-toolkit.org/docs/modules/Template.html[官网]
- http://115.236.166.171:9001/framework/file/file-support[Javascript实现] </description>
    </item>
    
  </channel>
</rss>